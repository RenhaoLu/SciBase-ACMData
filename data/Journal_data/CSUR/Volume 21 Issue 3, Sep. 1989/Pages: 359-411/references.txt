AASA, A., HOLMSTROM, $., AND NILSSON, C. 1987. An efficiency comparison of some representations of purely functional arrays. Tech. Rep. 33. Programming Methodology Group, Chalmers University of Technology.
Harold Abelson , Gerald Jay Sussman , Julie Sussman, Structure and interpretation of computer programs, MIT Press, Cambridge, MA, 1985
W. B. Acherman , J. B. Dennis , William B Ackerman, VAL- ORIENTED ALGORITHMIC LANGUAGE, PRELIMINARY REFERENCE MANUAL, Massachusetts Institute of Technology, Cambridge, MA, 1979
ANDERSON, $., AND HUDAK, P. 1989. Efficient compilation of Haskell array comprehensions. Tech. Rep. YALEU/DCS/RR693. Yale University, Department of Computer Science.
Andrew W. Appel , David B. MacQueen, A standard ML compiler, Proc. of a conference on Functional programming languages and computer architecture, p.301-324, October 1987, Portland, Oregon, United States
ARVIND AND GOSTELOW, K. P. 1977. A computer capable of exchanging processors for time. In Proceedings IFIP Congress, pp. 849-853.
ARVIND AND GOSTELOW, K. P. 1982. The U-interpreter. Computer 15, 2, 42-50.
Arvind , Vinod Kathail, A multiple processor data flow machine that supports generalized procedures, Proceedings of the 8th annual symposium on Computer Architecture, p.291-302, May 12-14, 1981, Minneapolis, Minnesota, United States
ASHCROFT, r. A., AND WADGE, W. W. 1976a. Lucid--A formal system for writing and proving programs. SIAM J. Comput. 5, 3, 336-354.
E. A. Ashcroft , W. W. Wadge, Lucid, a nonprocedural language with iteration, Communications of the ACM, v.20 n.7, p.519-526, July 1977[doi>10.1145/359636.359715]
Lennart Augustsson, A compiler for lazy ML, Proceedings of the 1984 ACM Symposium on LISP and functional programming, p.218-227, August 06-08, 1984, Austin, Texas, United States[doi>10.1145/800055.802038]
Lennart Augustsson, Compiling pattern matching, Proc. of a conference on Functional programming languages and computer architecture, p.368-381, January 1985, Nancy, France
John Backus, Can programming be liberated from the von Neumann style?: a functional style and its algebra of programs, Communications of the ACM, v.21 n.8, p.613-641, Aug. 1978[doi>10.1145/359576.359579]
BACKUS, J., WILLIAMS, J. S., AND WIMMERS, E. L. 1986. FL language manual (preliminary version). Tech. Rep. RJ 5339 (54809). Computer Science, IBM Almaden Research Center, Almaden, CA.
BARENDREGT, H. P. 1984. The Lambda Calculus, Its Syntax and Semantics. Revised ed. North- Holland, Amsterdam.
BERRY, G. 1978. S~quentialit~ de l'~valuation formelle des ~,-expressions. In Proceedings 3-e Coltoque International SUE la Programmation.
Richard Bird , Philip Wadler, An introduction to functional programming, Prentice Hall International (UK) Ltd., Hertfordshire, UK, 1988
BLOSS, A. 1988. Path analysis: Using order-ofevaluation information to optimize lazy functional languages. Ph.D. Dept. Computer Science, dissertation, Yale Univ.
Adrienne Bloss , Paul Hudak, Path Semantics, Proceedings of the 3rd  Workshop on Mathematical Foundations of Programming Language Semantics, p.476-489, April 08-10, 1987
BLOSS, A., HUDAK, P., AND YOUNG, J. 1988. Code optimizations for lazy evaluation. Lisp and Symbolic Computation: An International Journal 1, 147-164.
BOEHM, H.-J. 1985. Partial polymorphic type inference is undecidable. In Proceedings of 26th Sympsoium on Foundations of Computer Science. IEEE pp. 339-345.
BOUTEL, B. E. 1988. Tui language manual. Tech. Rep. CSD-8-021. Victoria University of Wellington, Department of Computer Science.
BURGE, W. H. 1975. Recursive Programming Techniques. Addison-We~ley, Reading, Mass.
G. L. Burn , S. L. Peyton Jones , J. D. Robson, The spineless G-machine, Proceedings of the 1988 ACM conference on LISP and functional programming, p.244-258, July 25-27, 1988, Snowbird, Utah, United States[doi>10.1145/62678.62717]
R. M. Burstall , D. B. MacQueen , D. T. Sannella, HOPE: An experimental applicative language, Proceedings of the 1980 ACM conference on LISP and functional programming, p.136-143, August 25-27, 1980, Stanford University, California, United States[doi>10.1145/800087.802799]
F. Warren Burton, Annotations to Control Parallelism and Reduction Order in the Distributed Evaluation of Functional Programs, ACM Transactions on Programming Languages and Systems (TOPLAS), v.6 n.2, p.159-174, April 1984[doi>10.1145/2993.357241]
F. W. Burton, Nondeterminism with referential transparency in functional programming languages, The Computer Journal, v.31 n.3, p.243-247, June 1988[doi>10.1093/comjnl/31.3.243]
Luca Cardelli , Peter Wegner, On understanding types, data abstraction, and polymorphism, ACM Computing Surveys (CSUR), v.17 n.4, p.471-523, Dec. 1985[doi>10.1145/6041.6042]
CARTWRIGHT, R. 1976. A practical formal semantic definition and verification system for typed Lisp. Tech. Rep. AIM-296. Stanford Artificial Intelligence Laboratory.
CnEN, M. C. 1986. Transformations of parallel programs in crystal. In Information Processing '86, Elsevier North-Holland, New York, pp. 455-462.
CHURCH, A. 1932-1933. A set of postulates for the foundation of logic. Ann. Math. 2, 33-34, 346- 366, 839-864.
Alonzo Church, The Calculi of Lambda Conversion. (AM-6) (Annals of Mathematics Studies), Princeton University Press, Princeton, NJ, 1985
CHURCH, A., AND ROSSER, J. B. 1936. Some properties of conversion. Trans. Am. Math. Soc. 39, 472-482.
CURRY, H. B., AND FEYS, R. 1958. Combinatory Logic. Vol. 1. North-Holland, The Netherlands.
Luis Damas , Robin Milner, Principal type-schemes for functional programs, Proceedings of the 9th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.207-212, January 25-27, 1982, Albuquerque, Mexico[doi>10.1145/582153.582176]
John Darlington , Lyndon While, Controlling the behavior of functional language systems, Proc. of a conference on Functional programming languages and computer architecture, p.278-300, October 1987, Portland, Oregon, United States
A. L. Davis, The architecture and system method of DDM1: A recursively structured Data Driven Machine, Proceedings of the 5th annual symposium on Computer architecture, p.210-215, April 03-05, 1978[doi>10.1145/800094.803050]
DEGROOT, D., AND LINDSTROM, G. 1985. Functional and Logic Programming. Prentice-Hall, EngleP wood Cliffs, N.J.
DELOSME, J.-M., AND IPSEN, I. C. F. 1985. An illustration of a methodology for the construction of efficient systolic architectures in VLSI. In Proceedings 2nd International Symposium on VLSI Technology, Systems, and Applications, ITRI, NSC pp. 268-273.
Jack B. Dennis , David P. Misunas, A preliminary architecture for a basic data-flow processor, Proceedings of the 2nd annual symposium on Computer architecture, p.126-132, January 20-22, 1975[doi>10.1145/642089.642111]
FAmBAIRN, J. 1985. Design and implementation of a simple typed language based on the lambda calculus. Ph.D. dissertation, Univ. of Cambridge. Available as Computer Laboratory TR No. 75.
John Fairbairn , Stuart Wray, TIM: A simple, lazy abstract machine to execute supercombinators, Proc. of a conference on Functional programming languages and computer architecture, p.34-45, October 1987, Portland, Oregon, United States
FIELD, A. J., AND HARRISON, P. G. 1988. Functional Programming. Addison-Wesley, Workingham, England.
Steven Fortune , Daniel Leivant , Michael O'Donnell, The Expressiveness of Simple and Second-Order Type Structures, Journal of the ACM (JACM), v.30 n.1, p.151-185, Jan. 1983[doi>10.1145/322358.322370]
FRIEDMAN, D. P., AND WISE, D. $. 1976. Cons should not evaluate its arguments. In Automata, Languages and Programming, Edinburgh University Press, pp. 257-284.
H. Gelernter , J. R. Hansen , C. L. Gerberich, A Fortran-Compiled List-Processing Language, Journal of the ACM (JACM), v.7 n.2, p.87-101, April 1960[doi>10.1145/321021.321022]
David K. Gifford , John M. Lucassen, Integrating functional and imperative programming, Proceedings of the 1986 ACM conference on LISP and functional programming, p.28-38, August 1986, Cambridge, Massachusetts, United States[doi>10.1145/319838.319848]
GIRARD, J.-Y. 1972. Interpretation Fonctionelle et Elimination des Coupures dans l'Arithm~tique d'Ordre Sup~rieur. Ph.D. dissertation, Univ. of Paris.
Benjamin Goldberg, Buckwheat: graph reduction on a shared-memory multiprocessor, Proceedings of the 1988 ACM conference on LISP and functional programming, p.40-51, July 25-27, 1988, Snowbird, Utah, United States[doi>10.1145/62678.62683]
Benjamin F. Goldberg, Multiprocessor execution of functional programs, 1988
B. Goldberg , P. Hudak, Implementing functional programs on a hypercube multiprocessor, Proceedings of the third conference on Hypercube concurrent computers and applications: Architecture, software, computer systems, and general issues, p.489-504, January 19-20, 1988, Pasadena, California, United States[doi>10.1145/62297.62356]
GORDON, M. J., MILNER, R., AND WADSWORTH, C. P. 1979. Edinburgh LCF. Springer-Verlag LNCS 78, Berlin.
M. Gordon , R. Milner , L. Morris , M. Newey , C. Wadsworth, A Metalanguage for interactive proof in LCF, Proceedings of the 5th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, p.119-130, January 23-25, 1978, Tucson, Arizona[doi>10.1145/512760.512773]
John Guttag , James Horning , John Williams, FP with data abstraction and strong typing, Proceedings of the 1981 conference on Functional programming languages and computer architecture, p.11-24, October 18-22, 1981, Portsmouth, New Hampshire, United States[doi>10.1145/800223.806758]
HANCOCK, P. 1987. Polymorphic type-checking. In The Implementation of Functional Programming Languages, S. L. Peyton Jones, Ed. Prentice-Hall International, Englewood Cliffs, N.J., Chapters 8 and 9.
Peter Henderson, Functional Programming, Prentice Hall PTR, Upper Saddle River, NJ, 1980
HENDERSON, P. 1982. Purely functional operating systems. In Functional Programming and Its Applications: An Advance Course. Cambridge University Press, pp. 177-192.
Peter Henderson , James H. Morris, Jr., A lazy evaluator, Proceedings of the 3rd ACM SIGACT-SIGPLAN symposium on Principles on programming languages, p.95-103, January 19-21, 1976, Atlanta, Georgia[doi>10.1145/800168.811543]
HINDLEY, R. 1969. The principle type scheme of an object in combinatory logic. Trans. Amer. Math. Soc. 146, 29-60.
HOLMSTROM, S. 1983. How to handle large data structures in functional languages. In Proceedings of SERC/Chalmers Workshop on Declarative Programming Languages. SERC.
HUDAK, P. 1984. ALFL Reference Manual and Programmer's Guide. 2nd ed. Res. Rep. YALEU/ DCS/RR-322. Yale University.
Paul Hudak, Arrays, non-determinism, side-effects, and parallelism: A functional perspective, Proc. of a workshop on Graph reduction, p.312-327, September 1987, Santa Fe, New Mexico, United States
Paul Hudak, Denotational semantics of a para-functional programming language, International Journal of Parallel Programming, v.15 n.2, p.103-125, April 1986[doi>10.1007/BF01414441]
Paul Hudak, Para-functional programming, Computer, v.19 n.8, p.60-69, Aug. 1986[doi>10.1109/MC.1986.1663309]
Paul Hudak , Steve Anderson, Pomset interpretations of parallel function programs, Proc. of a conference on Functional programming languages and computer architecture, p.234-256, October 1987, Portland, Oregon, United States
HUDAK, P., AND ANDERSON, S. 1988. Haskell solutions to the language session problems at the 1988 Salishan high-speed computing conference. Tech. Rep. YALEU/DCS/RR-627. Department of Computer Science, Yale University.
Paul Hudak , Eric Hohr, Graphinators and the duality of SIMD and MIMD, Proceedings of the 1988 ACM conference on LISP and functional programming, p.224-234, July 25-27, 1988, Snowbird, Utah, United States[doi>10.1145/62678.62714]
HUDAK, P., AND SUNDARESH, R. 1988. On the expressiveness of purely functional I/O systems. Tech. Rep. YALEU/DCS/RR-665. Department of Computer Science. Yale University.
Paul Hudak , Lauren Smith, Para-functional programming: a paradigm for programming multiprocessor systems, Proceedings of the 13th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, p.243-254, January 01, 1986, St. Petersburg Beach, Florida[doi>10.1145/512644.512667]
HUDAK, P., AND WADLER, P. Eds. 1988. Report on the Functional Programming Language Haskell. Tech. Rep. YALEU/DCS/RR656. Department of Computer Science, Yale University.
HUGHES, J. 1984. Why functional programming matters. Tech. Rep. 16. Programming Methodology Group, Chalmers University of Technology.
HUGHES, J. 1985a. An efficient implementation of purely functional arrays. Tech. Rep. Programming Methodology Group, Chalmers University of Technology.
John Hughes, Lazy memo-functions, Proc. of a conference on Functional programming languages and computer architecture, p.129-146, January 1985, Nancy, France
Kenneth E. Iverson, A Programming Language., John Wiley & Sons, 1962
JOHNSON, S. D. 1988. Daisy Programming Manual. Tech. Rep. Indiana University Computer Science Department.
KAES, S. 1988. Parametric polymorphism. In Proceedings of the 2nd Eupropean Symposium on Programming. Springer-Verlag LNCS 300.
KELLER, R. M. 1982. FEL programmer's guide. AMPS TR 7. University of Utah.
KELLER, R. M., AND LiNDSTROM, G. 1985. Approaching distributed database implementations through functional programming concepts. In International Conference on Distributed Systems. IEEE.
Robert M. Keller , M. R. Sleep, Applicative caching, ACM Transactions on Programming Languages and Systems (TOPLAS), v.8 n.1, p.88-108, Jan. 1986[doi>10.1145/5001.5004]
KELLER, R. M., JAYARAMAN, B., ROSE, D., AND LINDSTROM, G. 1980. FGLprogrammer's guide. AMPS Tech. Memo 1. Department of Computer Science, University of Utah.
KLEENE, S. C. 1936. n-definability and recursiveness. Duke Math. J. 2, 340-353.
KLEENE, S. C., AND ROSSER, J. B. 1935. The inconsistency of certain forms of logic. Ann. Math. 2, 36, 630-636.
KROEZE, H. J. 1986-1987. The TWENTEL system (version 1). Tech. Rep. Department of Computer Science, University of Twente, The Netherlands.
LANDIN, P. J. 1964. The mechanical evaluation of expressions. Comput. J. 6, 4, 308-320.
P. J. Landin, A correspondence between ALGOL 60 and Church's Lambda-notations: Part II, Communications of the ACM, v.8 n.3, p.158-167, March 1965[doi>10.1145/363791.363804]
P. J. Landin, The next 700 programming languages, Communications of the ACM, v.9 n.3, p.157-166, March 1966[doi>10.1145/365230.365257]
J. M. Lucassen , D. K. Gifford, Polymorphic effect systems, Proceedings of the 15th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.47-57, January 10-13, 1988, San Diego, California, United States[doi>10.1145/73560.73564]
MARKOV, A. A. 1951. Teoriya algorifmov (Theory of algorithms). Trudy Mat. Inst. Steklov 38, 176-189.
John McCarthy, Recursive functions of symbolic expressions and their computation by machine, Part I, Communications of the ACM, v.3 n.4, p.184-195, April 1960[doi>10.1145/367177.367199]
MCCARTHY, J. 1963. A basis for a mathematical theory of computation. In Computer Programming and Formal Systems. North-Holland, The Netherlands, pp. 33-70.
John McCarthy, History of LISP, The first ACM SIGPLAN  conference on History of programming languages, p.217-223, June 01-03, 1978, Los Angeles, CA[doi>10.1145/960118.808387]
James R. McGraw, The VAL Language: Description and Analysis, ACM Transactions on Programming Languages and Systems (TOPLAS), v.4 n.1, p.44-82, Jan. 1982[doi>10.1145/357153.357157]
MCGRAW, J., ALLAN, S., GLAUERT, J., AND DOBES, I. 1983. SISAL: Streams and Iteration in a Single- Assignment Language, Language Reference Manual. Tech. Rep. M-146. Lawrence Livermore National Laboratory.
Robert Milne , C. Strachey, A  Theory of Programming Language Semantics, Halsted Press, New York, NY, 1977
MILNER, R. A. 1978. A theory of type polymorphism in programming. J. Comput. Syst. Sci. 17, 3, 348-375.
Robin Milner, A proposal for standard ML, Proceedings of the 1984 ACM Symposium on LISP and functional programming, p.184-197, August 06-08, 1984, Austin, Texas, United States[doi>10.1145/800055.802035]
MULLIN, L. R. 1988. A mathematics of arrays. Ph.D dissertation, Computer and Information Science and CASE Center, Syracuse University.
NIKHIL, R. S., PINGALI, K., AND ARVIND. 1986. Id nouveau. Computation Structures Group Memo 265. Laboratory for Computer Science, Massachusetts Institute of Technology.
Simon L. Peyton Jones, The Implementation of Functional Programming Languages (Prentice-Hall International Series in Computer Science), Prentice-Hall, Inc., Upper Saddle River, NJ, 1987
Simon L. Peyton Jones , Chris Clack , John Salkild , Mark Hardie, GRIP—A high-performance architecture for parallel graph reduction, Proc. of a conference on Functional programming languages and computer architecture, p.98-112, October 1987, Portland, Oregon, United States
Frank Pfenning, Partial polymorphic type inference and higher-order unification, Proceedings of the 1988 ACM conference on LISP and functional programming, p.153-163, July 25-27, 1988, Snowbird, Utah, United States[doi>10.1145/62678.62697]
POST, E.L. Formal reductions of the general combinatorial decision problem. Am. J. Math. 65, 197-215.
J Rees , W Clinger, Revised report on the algorithmic language scheme, ACM SIGPLAN Notices, v.21 n.12, p.37-79, Dec. 1986[doi>10.1145/15042.15043]
John C. Reynolds, Towards a theory of type structure, Programming Symposium, Proceedings Colloque sur la Programmation, p.408-423, April 09-11, 1974
J C Reynolds, Three approaches to type structure, Proc. of the international joint conference on theory and practice of software development (TAPSOFT) Berlin, March 25-29, 1985 on Mathematical foundations of software development, Vol. 1: Colloquium on trees in algebra and programming (CAAP'85), p.97-138, April 1985, Berlin, Germany
J. Barkley Rosser, Highlights of the history of the lambda-calculus, Proceedings of the 1982 ACM symposium on LISP and functional programming, p.216-225, August 15-18, 1982, Pittsburgh, Pennsylvania, United States[doi>10.1145/800068.802153]
David A. Schmidt, Detecting global variables in denotational specifications, ACM Transactions on Programming Languages and Systems (TOPLAS), v.7 n.2, p.299-310, April 1985[doi>10.1145/3318.3323]
SCHONrINKEL, M. 1924. Uber die bausteine dee mathematischen logik. Mathematische Annalen 92, 305.
SCOTT, D. S. 1970. Outline of a mathematical theory of computation. Programming Research Group PRG-2, Oxford University.
SHAPIRO, E. 1989.' Systolic Programming: A Paradigm of Parallel Processing. Department of Applied Mathematics Tech. Rep. CS84-21, The Weizmann Institute of Science.
SRIDHARAN, N. S. 1985. Semi-applicative programming: An example. Tech. Rep. BBN Laboratories.
Guy L. Steele, Jr. , W. Daniel Hillis, Connection Machine Lisp: fine-grained parallel symbolic processing, Proceedings of the 1986 ACM conference on LISP and functional programming, p.279-297, August 1986, Cambridge, Massachusetts, United States[doi>10.1145/319838.319870]
Joseph E. Stoy, Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory, MIT Press, Cambridge, MA, 1977
STOYE, W. 1985. A New Scheme for Writing Functional Operating Systems. Tech. Rep. 56. Computer Laboratory, University of Cambridge.
Shreekant S. Thakkar, Dataflow and Reduction Architectures, Selected Reprints On, IEEE Computer Society Press, Los Alamitos, CA, 1987
TORTE, M. 1988. Operational semantics and polymorphic type inference. Ph.D. dissertation, Dept. Computer Science, Univ. of Edinburgh (CST-52- 88).
TRAKHTENBROT, B. A. 1988. Comparing the Church and Turing approaches: Two prophetic messages. Tech. Rep. 98/88. Eskenasy Institute of Computer Science, Tel-Aviv University.
Philip C. Treleaven , David R. Brownbridge , Richard P. Hopkins, Data-Driven and Demand-Driven Computer Architecture, ACM Computing Surveys (CSUR), v.14 n.1, p.93-143, March 1982[doi>10.1145/356869.356873]
Hai-Chen Tu, Fac: functional array calculator and its application to apl and functional programming (carrier, infinite), 1986
Tu, H-C., AND PERLIS, A. J. 1986. FAC: A functional APL language. IEEE Software 3, 1, 36-45.
TURING, A. M. 1936. On computable numbers with an application to the entscheidungsproblem. Proc. London Math. Soc. 42, 230-265.
TURING, A. M. 1937. Computability and k-definability. J. Symbolic Logic 2, 153-163.
TURNER, D. A. 1976. SASL language manual. Tech. Rep. Univ. St. Andrews.
TURNER, U. A. 1979. A new implementation techinque for applicative languages. Softw. Pract. Exper. 9, 31-49.
D. A. Turner, The semantic elegance of applicative languages, Proceedings of the 1981 conference on Functional programming languages and computer architecture, p.85-92, October 18-22, 1981, Portsmouth, New Hampshire, United States[doi>10.1145/800223.806766]
TURNER, D. A., 1982. Recursion equations as a programming language. In Functional Programming and Its Applications: An Advanced Course. Cambridge University Press, New York, pp. 1-28.
D. A. Turner, Miranda: a non-strict functional language with polymorphic types, Proc. of a conference on Functional programming languages and computer architecture, p.1-16, January 1985, Nancy, France
VAN HEIJENOORT, J. 1967. From Frege to GSdel. Harvard University Press, Cambridge, Mass.
VEGDAHL, S. R. 1984. A survey of proposed architectures for the execution of functional languages. IEEE Trans. Comput. C-23, 12, 1050-1071.
VUILLEMiN, J. 1974. Correct and optimal implementations of recursion in a simple programming language. J. Comput. Syst. Sci. 9, 3.
William W. Wadge , Edward A. Ashcroft, LUCID, the dataflow programming language, Academic Press Professional, Inc., San Diego, CA, 1985
Philip Wadler, A new array operation, Proc. of a workshop on Graph reduction, p.328-335, September 1987, Santa Fe, New Mexico, United States
WADLER, P. 1987a. Efficient compilation of patternmatching. In The Implementation of Functional Programming Languages, S. L. Peyton Jones, Ed. Prentice-Hall International, Englewood Cliffs, N.J., Chapter 5.
P. Wadler, Views: a way for pattern matching to cohabit with data abstraction, Proceedings of the 14th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, p.307-313, January 21-23, 1987, Munich, West Germany[doi>10.1145/41625.41653]
P. Wadler , S. Blott, How to make ad-hoc polymorphism less ad hoc, Proceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.60-76, January 11-13, 1989, Austin, Texas, United States[doi>10.1145/75277.75283]
WADLER, P., AND MILLER, Q. 1988. An introduction to Orwell. Tech. Rep. Programming Research Group, Oxford University. (First version, 1985.)
WADSWORTH, C. P. 1971. Semantics andpragmatics of the lambda calculus. Ph.D. dissertation, Oxford Univ.
Paul Watson , Ian Watson, Evaluating functional programs on the FLAGSHIP machine, Proc. of a conference on Functional programming languages and computer architecture, p.80-97, October 1987, Portland, Oregon, United States
Peter. Wegner, Programming Languages, Information Structures, and Machine Organization., McGraw Hill Text, 1968
WIKSTROM, ,A. 1988. Standard ML. Prentice-Hall, Englewood Cliffs, N.J.
David S. Wise, Matrix algebra and applicative programming, Proc. of a conference on Functional programming languages and computer architecture, p.134-153, October 1987, Portland, Oregon, United States
YOUNG, J. 1988. The Semantic Analysis of Functional Programs: Theory and Practice. Ph.D. dissertation, Dept. Computer Science, Yale Univ., 130-142.
