Philip Samuel Abrams, An apl machine, Stanford University, Stanford, CA, 1970
Ali-Reza Adl-Tabatabai , Michał Cierniak , Guei-Yuan Lueh , Vishesh M. Parikh , James M. Stichnoth, Fast, effective code generation in a just-in-time Java compiler, Proceedings of the ACM SIGPLAN 1998 conference on Programming language design and implementation, p.280-290, June 17-19, 1998, Montreal, Quebec, Canada[doi>10.1145/277650.277740]
Ole Agesen, Concrete type inference: delivering object-oriented applications, Stanford University, Stanford, CA, 1996
Ole Agesen, Design and implementation of Pep, a Java just-in-time translator, Theory and Practice of Object Systems, v.3 n.2, p.127-155, 1997[doi>10.1002/(SICI)1096-9942(1997)3:2<127::AID-TAPO4>3.0.CO;2-S]
Ole Agesen , Urs Hölzle, Type feedback vs. concrete type inference: a comparison of optimization techniques for object-oriented languages, Proceedings of the tenth annual conference on Object-oriented programming systems, languages, and applications, p.91-107, October 15-19, 1995, Austin, Texas, USA[doi>10.1145/217838.217847]
Altman, E., Gschwind, M., Sathaye, S., Kosonocky, S., Bright, A., Fritts, J., Ledak, P., Appenzeller, D., Agricola, C., and Filan, Z. 2000a. BOA: The architecture of a binary translation processor. Tech. Rep. RC 21665, IBM Research Division, Yorktown Heights, NY.
Erik R. Altman , David Kaeli , Yaron Sheffer, Guest Editors' Introduction: Welcome to the Opportunities of Binary Translation, Computer, v.33 n.3, p.40-45, March 2000[doi>10.1109/2.825694]
Joe Armstrong, The development of Erlang, Proceedings of the second ACM SIGPLAN international conference on Functional programming, p.196-203, June 09-11, 1997, Amsterdam, The Netherlands[doi>10.1145/258948.258967]
Joel Auslander , Matthai Philipose , Craig Chambers , Susan J. Eggers , Brian N. Bershad, Fast, effective dynamic compilation, Proceedings of the ACM SIGPLAN 1996 conference on Programming language design and implementation, p.149-159, May 21-24, 1996, Philadelphia, Pennsylvania, USA[doi>10.1145/231379.231409]
Ana Azevedo , Alex Nicolau , Joe Hummel, Java annotation-aware just-in-time (AJIT) complilation system, Proceedings of the ACM 1999 conference on Java Grande, p.142-151, June 12-14, 1999, San Francisco, California, USA[doi>10.1145/304065.304115]
Bala, V., Duesterwald, E., and Banerjia, S. 1999. Transparent dynamic optimization. Tech. Rep. HPL-1999-77, Hewlett-Packard, Polo Alto, CA.
Bartlett, J. 1992. Familiar Quotations (16th ed.). J. Kaplan, Ed. Little, Brown and Company, Boston, MA.
James R. Bell, Threaded code, Communications of the ACM, v.16 n.6, p.370-372, June 1973[doi>10.1145/362248.362270]
Bentley, J. 1988. Little languages. In More Programming Pearls. Addison-Wesley, Reading, MA, 83--100.
Bik, A. J. C., Girkar, M., and Haghighat, M. R. 1999. Experiences with Java JIT optimization. In Innovative Architecture for Future Generation High-Performance Processors and Systems. IEEE Computer Society Press, Los Alamitos, CA, 87--94.
Brown, P. J. 1976. Throw-away compiling. Softw.---Pract. Exp. 6, 423--434.
Brown, P. J. 1990. Writing Interactive Compilers and Interpreters. Wiley, New York, NY.
Robert Gregory Burger, Efficient compilation and profile-driven dynamic recompilation in scheme, Indiana University, Indianapolis, IN, 1997
Michael G. Burke , Jong-Deok Choi , Stephen Fink , David Grove , Michael Hind , Vivek Sarkar , Mauricio J. Serrano , V. C. Sreedhar , Harini Srinivasan , John Whaley, The Jalapeño dynamic optimizing compiler for Java, Proceedings of the ACM 1999 conference on Java Grande, p.129-141, June 12-14, 1999, San Francisco, California, USA[doi>10.1145/304065.304113]
Luca Cardelli, Compiling a functional language, Proceedings of the 1984 ACM Symposium on LISP and functional programming, p.208-217, August 06-08, 1984, Austin, Texas, USA[doi>10.1145/800055.802037]
Craig David Chambers, The design and implementation of the self compiler, an optimizing compiler for object-oriented programming languages, Stanford University, Stanford, CA, 1992
C. Chambers , D. Ungar, Customization: optimizing compiler technology for SELF, a dynamically-typed object-oriented programming language, Proceedings of the ACM SIGPLAN 1989 Conference on Programming language design and implementation, p.146-160, June 19-23, 1989, Portland, Oregon, USA[doi>10.1145/73141.74831]
Craig Chambers , David Ungar, Interactive type analysis and extended message splitting; optimizing dynamically-typed object-oriented programs, Proceedings of the ACM SIGPLAN 1990 conference on Programming language design and implementation, p.150-164, June 1990, White Plains, New York, USA[doi>10.1145/93542.93562]
Craig Chambers , David Ungar, Making pure object-oriented languages practical, Conference proceedings on Object-oriented programming systems, languages, and applications, p.1-15, October 06-11, 1991, Phoenix, Arizona, USA[doi>10.1145/117954.117955]
C. Chambers , D. Ungar , E. Lee, An efficient implementation of SELF a dynamically-typed object-oriented language based on prototypes, Conference proceedings on Object-oriented programming systems, languages and applications, p.49-70, October 02-06, 1989, New Orleans, Louisiana, USA[doi>10.1145/74877.74884]
Chen, W.-K., Lerner, S., Chaiken, R., and Gillies, D. M. 2000. Mojo: a dynamic optimization system. In Proceedings of the Third ACM Workshop on Feedback-Directed and Dynamic Optimization (FDDO-3, Dec. 2000).
Michal Cierniak , Wei Li, Briki: an Optimizing Java Compiler, Proceedings of the 42nd IEEE International Computer Conference, p.179, February 23-26, 1997
Bob Cmelik , David Keppel, Shade: a fast instruction-set simulator for execution profiling, Proceedings of the 1994 ACM SIGMETRICS conference on Measurement and modeling of computer systems, p.128-137, May 16-20, 1994, Nashville, Tennessee, USA[doi>10.1145/183018.183032]
C. Consel , L. Hornof , R. Marlet , G. Muller , S. Thibault , E.-N. Volanschi , J. Lawall , J. Noyé, Tempo: specializing systems applications and beyond, ACM Computing Surveys (CSUR), v.30 n.3es, Sept. 1998[doi>10.1145/289121.289140]
Charles Consel , François Noël, A general approach for run-time specialization and its application to C, Proceedings of the 23rd ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.145-156, January 21-24, 1996, St. Petersburg Beach, Florida, USA[doi>10.1145/237721.237767]
Timothy Cramer , Richard Friedman , Terrence Miller , David Seberger , Robert Wilson , Mario Wolczko, Compiling Java Just in Time, IEEE Micro, v.17 n.3, p.36-43, May 1997[doi>10.1109/40.591653]
Dakin, R. J. and Poole, P. C. 1973. A mixed code approach. The Comput. J. 16, 3, 219--222.
Dawson, J. L. 1973. Combining interpretive code with machine code. The Comput. J. 16, 3, 216--219.
Deaver, D., Gorton, R., and Rubin, N. 1999. Wiggins/Redstone: An on-line program specializer. In Proceedings of the IEEE Hot Chips XI Conference (Aug. 1999). IEEE Computer Society Press, Los, Alamitos, CA.
L. Peter Deutsch , Allan M. Schiffman, Efficient implementation of the smalltalk-80 system, Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, p.297-302, January 15-18, 1984, Salt Lake City, Utah, USA[doi>10.1145/800017.800542]
Sylvia Dieckmann , Urs Holzle, The Space Overhead of Customization, University of California at Santa Barbara, Santa Barbara, CA, 1997
Ebcioğlu, K. and Altman, E. R. 1996. DAISY: Dynamic compilation for 100&percnt; architectural compatibility. Tech. Rep. RC 20538. IBM Research Division, Yorktown Heights, NY.
Kemal Ebcioğlu , Erik R. Altman, DAISY: dynamic compilation for 100% architectural compatibility, Proceedings of the 24th annual international symposium on Computer architecture, p.26-37, June 01-04, 1997, Denver, Colorado, USA[doi>10.1145/264107.264126]
Dawson R. Engler, VCODE: a retargetable, extensible, very fast dynamic code generation system, Proceedings of the ACM SIGPLAN 1996 conference on Programming language design and implementation, p.160-170, May 21-24, 1996, Philadelphia, Pennsylvania, USA[doi>10.1145/231379.231411]
Dawson R. Engler , Wilson C. Hsieh, Derive: a tool that automatically reverse-engineers instruction encodings, Proceedings of the ACM SIGPLAN workshop on Dynamic and adaptive compilation and optimization, p.12-22, January 2000[doi>10.1145/351397.351409]
Dawson R. Engler , Wilson C. Hsieh , M. Frans Kaashoek, C: a language for high-level, efficient, and machine-independent dynamic code generation, Proceedings of the 23rd ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.131-144, January 21-24, 1996, St. Petersburg Beach, Florida, USA[doi>10.1145/237721.237765]
Dawson R. Engler , Todd A. Proebsting, DCG: an efficient, retargetable dynamic code generation system, Proceedings of the sixth international conference on Architectural support for programming languages and operating systems, p.263-272, October 05-07, 1994, San Jose, California, USA[doi>10.1145/195473.195567]
Franz, M. 1994. Code-generation on-the-fly: A key to portable software. Ph.D. dissertation. ETH Zurich, Zurich, Switzerland.
Michael Franz , Thomas Kistler, Slim binaries, Communications of the ACM, v.40 n.12, p.87-94, Dec. 1997[doi>10.1145/265563.265576]
Christopher W. Fraser , Todd A. Proebsting, Finite-state code generation, Proceedings of the ACM SIGPLAN 1999 conference on Programming language design and implementation, p.270-280, May 01-04, 1999, Atlanta, Georgia, USA[doi>10.1145/301618.301680]
Richard P. Gabriel, Performance and evaluation of LISP systems, Massachusetts Institute of Technology, Cambridge, MA, 1985
L. Geppert , T. S. Perry, Transmeta's magic show [microprocessor chips], IEEE Spectrum, v.37 n.5, p.26-33, May 2000[doi>10.1109/6.842131]
Adele Goldberg , David Robson, Smalltalk-80: the language and its implementation, Addison-Wesley Longman Publishing Co., Inc., Boston, MA, 1983
Gorton, R. 2001. Private communication.
Gosling, J. 2001. Private communication.
Michael Gschwind , Erik R. Altman , Sumedh Sathaye , Paul Ledak , David Appenzeller, Dynamic and Transparent Binary Translation, Computer, v.33 n.3, p.54-59, March 2000[doi>10.1109/2.825696]
Hammond, J. 1977. BASIC---an evaluation of processing methods and a study of some programs. Softw.---Pract. Exp. 7, 697--711.
Gilbert Joseph Hansen, Adaptive systems for the dynamic run-time optimization of programs., Carnegie Mellon University, Pittsburgh, PA, 1974
Ralph Clarke Haygood, Native code compilation in SICStus Prolog, Proceedings of the eleventh international conference on Logic programming, p.190-204, August 1994
John L. Hennessy , David A. Patterson, Computer architecture (2nd ed.): a quantitative approach, Morgan Kaufmann Publishers Inc., San Francisco, CA, 1996
Hölzle, U. 1994. Adaptive optimization for Self: Reconciling high performance with exploratory programming. Ph.D. dissertation. Carnegie-Mellon University, Pittsburgh, PA.
Urs Hölzle , David Ungar, Optimizing dynamically-dispatched calls with run-time type feedback, Proceedings of the ACM SIGPLAN 1994 conference on Programming language design and implementation, p.326-336, June 20-24, 1994, Orlando, Florida, USA[doi>10.1145/178243.178478]
Urs Hölzle , David Ungar, A third-generation SELF implementation: reconciling responsiveness with performance, Proceedings of the ninth annual conference on Object-oriented programming systems, language, and applications, p.229-243, October 23-28, 1994, Portland, Oregon, USA[doi>10.1145/191080.191116]
Kazuaki Ishizaki , Motohiro Kawahito , Toshiaki Yasue , Mikio Takeuchi , Takeshi Ogasawara , Toshio Suganuma , Tamiya Onodera , Hideaki Komatsu , Toshio Nakatani, Design, implementation, and evaluation of optimizations in a just-in-time compiler, Proceedings of the ACM 1999 conference on Java Grande, p.119-128, June 12-14, 1999, San Francisco, California, USA[doi>10.1145/304065.304111]
Erik Johansson , Mikael Pettersson , Konstantinos Sagonas, A high performance Erlang system, Proceedings of the 2nd ACM SIGPLAN international conference on Principles and practice of declarative programming, p.32-43, September 20-23, 2000, Montreal, Quebec, Canada[doi>10.1145/351268.351273]
Ronald L. Johnston, The Dynamic Incremental Compiler of APL\3000, Proceedings of the international conference on APL: part 1, p.82-87, May 30-June 01, 1979, New York, New York, USA[doi>10.1145/800136.804442]
Neil D. Jones , Carsten K. Gomard , Peter Sestoft, Partial evaluation and automatic program generation, Prentice-Hall, Inc., Upper Saddle River, NJ, 1993
David Keppel, A portable interface for on-the-fly instruction space modification, Proceedings of the fourth international conference on Architectural support for programming languages and operating systems, p.86-95, April 08-11, 1991, Santa Clara, California, USA[doi>10.1145/106972.106983]
Keppel, D., Eggers, S. J., and Henry, R. R. 1991. A case for runtime code generation. Tech. Rep. 91-11-04. Department of Computer Science and Engineering, University of Washington, Seattle, WA.
Thomas Kistler, Dynamic Runtime Optimization, Proceedings of the Joint Modular Languages Conference on Modular Programming Languages, p.53-66, March 19-21, 1997
Thomas Peter Kistler , Michael Franz, Continuous program optimization, University of California, Irvine, 1999
Kistler, T. 2001. Private communication.
Kistler, T. and Franz, M. 1999. The case for dynamic optimization: Improving memory-hierarchy performance by continuously adapting the internal storage layout of heap objects at run-time. Tech. Rep. 99-21 (May). University of California, Irvine, Irvine, CA. Revised September, 1999.
Klaiber, A. 2000. The technology behind Crusoe processors. Tech. Rep. (Jan.), Transmeta Corporation, Santa Clara, CA.
Knuth, D. E. 1971. An empirical study of Fortran programs. Softw.---Pract. Exp. 1, 105--133.
A. Krall, Efficient JavaVM Just-in-Time Compilation, Proceedings of the 1998 International Conference on Parallel Architectures and Compilation Techniques, p.205, October 12-18, 1998
Krall, A. and Grafl, R. 1997. A Java just-in-time compiler that transcends JavaVM's 32 bit barrier. In Proceedings of PPoPP '97 Workshop on Java for Science and Engineering.
Peter Lee , Mark Leone, Optimizing ML with run-time code generation, Proceedings of the ACM SIGPLAN 1996 conference on Programming language design and implementation, p.137-148, May 21-24, 1996, Philadelphia, Pennsylvania, USA[doi>10.1145/231379.231407]
Seungll Lee , Byung-Sun Yang , Suhyun Kim , Seongbae Park , Soo-Mook Moon , Kemal Ebcioğlu , Erik Altman, Efficient Java exception handling in just-in-time compilation, Proceedings of the ACM 2000 conference on Java Grande, p.1-8, June 03-04, 2000, San Francisco, California, USA[doi>10.1145/337449.337453]
Leone, M. and Dybvig, R. K. 1997. Dynamo: A staged compiler architecture for dynamic program optimization. Tech. Rep. 490. Computer Science Department, Indiana University, Bloomington, IN.
Leone, M. and Lee, P. 1994. Lightweight run-time code generation. In Proceedings of the ACM SIGPLAN Workshop on Partial Evaluation and Semantics-Based Program Manipulation. 97--106.
Renaud Marlet , Charles Consel , Philippe Boinot, Efficient incremental run-time specialization for free, Proceedings of the ACM SIGPLAN 1999 conference on Programming language design and implementation, p.281-292, May 01-04, 1999, Atlanta, Georgia, USA[doi>10.1145/301618.301681]
Mauriello, R. 2000. Private communication.
C. May, Mimic: a fast system/370 simulator, Papers of the Symposium on Interpreters and interpretive techniques, p.1-13, June 24-26, 1987, St. Paul, Minnesota, USA[doi>10.1145/29650.29651]
John McCarthy, Recursive functions of symbolic expressions and their computation by machine, Part I, Communications of the ACM, v.3 n.4, p.184-195, April 1960[doi>10.1145/367177.367199]
John McCarthy, History of LISP, History of programming languages I, ACM, New York, NY, 1978[doi>10.1145/960118.808387]
Terrence C. Miller, Tentative compilation: A design for an APL compiler, Proceedings of the international conference on APL: part 1, p.88-95, May 30-June 01, 1979, New York, New York, USA[doi>10.1145/800136.804443]
James George Mitchell, The design and construction of flexible and efficient interactive programming systems, Carnegie Mellon University, Pittsburgh, PA, 1970
Mitchell, J. G. 2000. Private communication.
Mitchell, J. G., Perlis, A. J., and van Zoeren, H. R. 1968. LC2: A language for conversational computing. In Interactive Systems for Experimental Applied Mathematics, M. Klerer and J. Reinfelds, Eds. Academic Press, New York, NY. (Proceedings of 1967 ACM Symposium.)
Mock, M., Berryman, M., Chambers, C., and Eggers, S. J. 1999. Calpa: A tool for automating dynamic compilation. In Proceedings of the Second ACM Workshop on Feedback-Directed and Dynamic Optimization. 100--109.
Ng, T. S. and Cantoni, A. 1976. Run time interaction with FORTRAN using mixed code. The Comput. J. 19, 1, 91--92.
T. Pittman, Two-level hybrid interpreter/native code execution for combined space-time program efficiency, Papers of the Symposium on Interpreters and interpretive techniques, p.150-152, June 24-26, 1987, St. Paul, Minnesota, USA[doi>10.1145/29650.29666]
Ian Piumarta , Fabio Riccardi, Optimizing direct threaded code by selective inlining, Proceedings of the ACM SIGPLAN 1998 conference on Programming language design and implementation, p.291-300, June 17-19, 1998, Montreal, Quebec, Canada[doi>10.1145/277650.277743]
Michael P. Plezbert , Ron K. Cytron, Does “just in time” = “better late than never”?, Proceedings of the 24th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.120-131, January 15-17, 1997, Paris, France[doi>10.1145/263699.263713]
Massimiliano Poletto , Dawson R. Engler , M. Frans Kaashoek, tcc: a system for fast, flexible, and high-level dynamic code generation, Proceedings of the ACM SIGPLAN 1997 conference on Programming language design and implementation, p.109-121, June 16-18, 1997, Las Vegas, Nevada, USA[doi>10.1145/258915.258926]
Norman Ramsey , Mary F. Fernandez, The New Jersey machine-code toolkit, Proceedings of the USENIX 1995 Technical Conference Proceedings, p.24-24, January 16-20, 1995, New Orleans, Louisiana
B. Ramakrishna Rau, Levels of representation of programs and the architecture of universal host machines, Proceedings of the 11th annual workshop on Microprogramming, p.67-79, November 19-22, 1978, Pacific Grove, California, USA
Rémy, D., Leroy, X., and Weis, P. 1999. Objective Caml---a general purpose high-level programming language. ERCIM News 36, 29--30.
Mendel Rosenblum , Stephen A. Herrod , Emmett Witchel , Anoop Gupta, Complete Computer System Simulation: The SimOS Approach, IEEE Parallel & Distributed Technology: Systems & Technology, v.3 n.4, p.34-43, December 1995[doi>10.1109/88.473612]
S. C. Schroeder , L. E. Vaughn, A high order language optimal execution processor Fast Intent Recognition System (FIRST), Proceedings of the ACM-IEEE symposium on High-level-language computer architecture, p.109-116, November 07-08, 1973, College Park, Maryland, USA[doi>10.1145/800121.803937]
Robert W. Sebesta, Concepts of programming languages (3rd ed.), Addison Wesley Longman Publishing Co., Inc., Redwood City, CA, 1996
Randall B. Smith , David Ungar, Programming as an Experience: The Inspiration for Self, Proceedings of the 9th European Conference on Object-Oriented Programming, p.303-330, August 07-11, 1995
Sun Microsystems. 2001. The Java HotSpot virtual machine. White paper. Sun Microsystems, Santa Clara, CA.
Scott Thibault , Charles Consel , Julia L. Lawall , Renaud Marlet , Gilles Muller, Static and Dynamic Program Compilation by Interpreter Specialization, Higher-Order and Symbolic Computation, v.13 n.3, p.161-178, Sept. 2000[doi>10.1023/A:1010078412711]
Ken Thompson, Programming Techniques: Regular expression search algorithm, Communications of the ACM, v.11 n.6, p.419-422, June 1968[doi>10.1145/363347.363387]
Transmeta Corporation. 2001. Code morphing software. Available online at http://www. transmeta.com/echnology/architecture/code_morphing.html. Transmeta Corporation, Santa Clara, CA.
Paul Tyma, Why are we using Java again?, Communications of the ACM, v.41 n.6, p.38-42, June 1998[doi>10.1145/276609.276617]
David Ung , Cristina Cifuentes, Machine-adaptable dynamic binary translation, Proceedings of the ACM SIGPLAN workshop on Dynamic and adaptive compilation and optimization, p.41-51, January 2000[doi>10.1145/351397.351414]
David Ungar , Randall B. Smith, Self: The power of simplicity, Conference proceedings on Object-oriented programming systems, languages and applications, p.227-242, October 04-08, 1987, Orlando, Florida, USA[doi>10.1145/38765.38828]
David Ungar , Randall B. Smith , Craig Chambers , Urs Hölzle, Object, Message, and Performance: How they Coexist in Self, Computer, v.25 n.10, p.53-64, October 1992[doi>10.1109/2.161280]
University of Michigan. 1966a. The System Loader. In University of Michigan Executive System for the IBM 7090 Computer, Vol. 1. University of Michigan, Ann Arbor, MI.
University of Michigan. 1966b. The "University of Michigan Assembly Program" ("UMAP"). In University of Michigan Executive System for the IBM 7090 Computer, Vol. 2. University of Michigan, Ann Arbor, MI.
van Dyke, E. J. 1977. A dynamic incremental compiler for an interpretive language. Hewlett-Packard J. 28, 11 (July), 17--24.
van Roy, P. 1994. The wonder years of sequential Prolog implementation. J. Logic Program. 19--20, 385--441.
Philip Wickline , Peter Lee , Frank Pfenning, Run-time code generation and modal-ML, Proceedings of the ACM SIGPLAN 1998 conference on Programming language design and implementation, p.224-235, June 17-19, 1998, Montreal, Quebec, Canada[doi>10.1145/277650.277727]
N. Wirth , J. Gutknecht, The Oberon system, Software—Practice & Experience, v.19 n.9, p.857-893, Sep. 1989[doi>10.1002/spe.4380190905]
Byung-Sun Yang , Soo-Mook Moon , Seongbae Park , Junpyo Lee , SeungIl Lee , Jinpyo Park , Yoo C. Chung , Suhyun Kim , Kemal Ebcioglu , Erik Altman, LaTTe: A Java VM Just-in-Time Compiler with Fast and Efficient Register Allocation, Proceedings of the 1999 International Conference on Parallel Architectures and Compilation Techniques, p.128, October 12-16, 1999
Cindy Zheng , Carol Thompson, PA-RISC to IA-64: Transparent Execution, No Recompilation, Computer, v.33 n.3, p.47-52, March 2000[doi>10.1109/2.825695]
