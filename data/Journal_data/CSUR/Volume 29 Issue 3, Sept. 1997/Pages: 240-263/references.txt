Samson Abramsky, Computational interpretations of linear logic, Theoretical Computer Science, v.111 n.1-2, p.3-57, April 12, 1993[doi>10.1016/0304-3975(93)90181-R]
ACHTEN, P. AND PLASMEIJER, R. 1995. The ins and outs of Clean I/O. J. Funct. Program. 5, 1 (Jan.), 81-110.
Erik Barendsen , Sjaak Smetsers, Conventional and Uniqueness Typing in Graph Rewrite Systems, Proceedings of the 13th Conference on Foundations of Software Technology and Theoretical Computer Science, p.41-51, December 15-17, 1993
BARR, M. AND WELLS, C. 1985. Toposes, Triples, and Theories. Springer-Verlag.
Richard Bird , Philip Wadler, An introduction to functional programming, Prentice Hall International (UK) Ltd., Hertfordshire, UK, 1988
CHURCH, A. 1940. A formulation of the simple theory of types. J. Symbol. Logic 5, 56-68.
CUPITT, J. 1989. A brief walk through KAOS. Tech. Rep. 52, Computing Laboratory, University of Kent at Canterbury.
Chih-Ping Chen , Paul Hudak, Rolling your own mutable ADT—a connection between linear types and monads, Proceedings of the 24th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.54-66, January 15-17, 1997, Paris, France[doi>10.1145/263699.263708]
DENNETT, D. 1991. Consciousness Explained. Little, Brown & Co., Boston, MA.
Andrzej Filinski, Representing monads, Proceedings of the 21st ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.446-457, January 16-19, 1994, Portland, Oregon, USA[doi>10.1145/174675.178047]
Jeroen Fokker, Functional Parsers, Advanced Functional Programming, First International Spring School on Advanced Functional Programming Techniques-Tutorial Text, p.1-23, May 24-30, 1995
Jean-Yves Girard, Linear logic, Theoretical Computer Science, v.50 n.1, p.1-102, Jan. 30, 1987[doi>10.1016/0304-3975(87)90045-4]
Joseph A. Goguen, Higher-order functions considered unnecessary for higher-order programming, Research topics in functional programming, Addison-Wesley Longman Publishing Co., Inc., Boston, MA, 1990
Andrew D. Gordon, Functional programming and input/output, Cambridge University Press, New York, NY, 1994
GUZMAN, J. AND HUDAK, P. 1990. Singlethreaded polymorphic lambda calculus. In Fifth IEEE Symposium on Logic in Computer Science, (Philadelphia, PA, June).
Cordelia V. Hall , Kevin Hammond , Will Partain , Simon L. Peyton Jones , Philip Wadler, The Glasgow Haskell Compiler: A Retrospective, Proceedings of the 1992 Glasgow Workshop on Functional Programming, p.62-71, July 06-08, 1992
John Hatcliff , Olivier Danvy, A generic account of continuation-passing styles, Proceedings of the 21st ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.458-471, January 16-19, 1994, Portland, Oregon, USA[doi>10.1145/174675.178053]
HOLMSTROM, S. 1988. A linear functional language. In Proceedings of the Workshop on Implementation of Lazy Functional Languages, Programming Methodology Group Rep. 53 (Chalmers University of Technology, Sept.).
HOWARD, W. A. 1980. The formulae-as-types notion of construction. In To H. B. Curry: Essays on Combinatory Logic, Lambda Calculus, and Formalism, J. P. Seldin and J. R. Hindley, Eds., Academic Press. (The original version was circulated privately in 1969.)
HUDAK, P. AND SUNDARESH, R.S. 1989. On the expressiveness of purely functional I/O systems. Tech. Rep. YALEU/DCS/RR-665, Yale University Dept of Computer Science, March.
Paul Hudak , Simon Peyton Jones , Philip Wadler , Brian Boutel , Jon Fairbairn , Joseph Fasel , María M. Guzmán , Kevin Hammond , John Hughes , Thomas Johnsson , Dick Kieburtz , Rishiyur Nikhil , Will Partain , John Peterson, Report on the programming language Haskell: a non-strict, purely functional language version 1.2, ACM SIGPLAN Notices, v.27 n.5, p.1-164, May 1992[doi>10.1145/130697.130699]
John Hughes, The Design of a Pretty-printing Library, Advanced Functional Programming, First International Spring School on Advanced Functional Programming Techniques-Tutorial Text, p.53-96, May 24-30, 1995
Mark P. Jones, A system of constructor classes: overloading and implicit higher-order polymorphism, Proceedings of the conference on Functional programming languages and computer architecture, p.52-61, June 09-11, 1993, Copenhagen, Denmark[doi>10.1145/165180.165190]
JONES, M.P. 1994. Gofer 2.30 implementation. Available by ftp from ftp.cs.nott.ac.uk/nott-fp/ languages/gofer.
Mark P. Jones, Functional Programming with Overloading and Higher-Order Polymorphism, Advanced Functional Programming, First International Spring School on Advanced Functional Programming Techniques-Tutorial Text, p.97-136, May 24-30, 1995
JONES, M. P. AND DUPONCHEEL, L. 1993. Composing monads. Res. Rep. YALE/DCS/RR- 1004, Yale University, New Haven, Dec.
Simon B Jones, Experiences with clean I/O, Proceedings of the 1995 international conference on Functional Programming, p.167-177, July 10-12, 1995, Glasgow, UK
David J. King , John Launchbury, Structuring depth-first search algorithms in Haskell, Proceedings of the 22nd ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.344-354, January 23-25, 1995, San Francisco, California, USA[doi>10.1145/199448.199530]
David J. King , Philip Wadler, Combining Monads, Proceedings of the 1992 Glasgow Workshop on Functional Programming, p.134-143, July 06-08, 1992
Y. Lafont, The linear abstract machine, Theoretical Computer Science, v.59 n.1-2, p.157-180, July 1988[doi>10.1016/0304-3975(88)90100-4]
P. J. Landin, Correspondence between ALGOL 60 and Church's Lambda-notation: part I, Communications of the ACM, v.8 n.2, p.89-101, Feb. 1965[doi>10.1145/363744.363749]
LAUNCHBURY, J. 1993. Lazy imperative programming. In Workshop on State in Programming Languages (Copenhagen, Denmark, June), ACM, New York.
John Launchbury, Graph Algorithms with a Functional Flavous, Advanced Functional Programming, First International Spring School on Advanced Functional Programming Techniques-Tutorial Text, p.308-331, May 24-30, 1995
John Launchbury , Simon L. Peyton Jones, Lazy functional state threads, Proceedings of the ACM SIGPLAN 1994 conference on Programming language design and implementation, p.24-35, June 20-24, 1994, Orlando, Florida, USA[doi>10.1145/178243.178246]
John Launchbury , Amr Sabry, Monadic state: axiomatization and type safety, Proceedings of the second ACM SIGPLAN international conference on Functional programming, p.227-238, June 09-11, 1997, Amsterdam, The Netherlands[doi>10.1145/258948.258970]
Sheng Liang , Paul Hudak , Mark Jones, Monad transformers and modular interpreters, Proceedings of the 22nd ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.333-343, January 23-25, 1995, San Francisco, California, USA[doi>10.1145/199448.199528]
J. W. Lloyd, Declarative Programming in Escher, University of Bristol, Bristol, UK, 1995
MACLANE, S. 1971. Categories for the Working Mathematician. Springer-Verlag.
Erik Meijer , Johan Jeuring, Merging Monads and Folds for Functional Programming, Advanced Functional Programming, First International Spring School on Advanced Functional Programming Techniques-Tutorial Text, p.228-266, May 24-30, 1995
Robin Milner , Mads Tofte , Robert Harper, The definition of Standard ML, MIT Press, Cambridge, MA, 1990
Robin Milner , Mads Tofte , Robert Harper, The definition of Standard ML, MIT Press, Cambridge, MA, 1990
E. Moggi, Computational lambda-calculus and monads, Proceedings of the Fourth Annual Symposium on Logic in computer science, p.14-23, June 1989, Pacific Grove, California, USA
Eugenio Moggi, Notions of computation and monads, Information and Computation, v.93 n.1, p.55-92, July 1991[doi>10.1016/0890-5401(91)90052-4]
Martin Odersky , Dan Rabin , Paul Hudak, Call by name, assignment, and the lambda calculus, Proceedings of the 20th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.43-56, March 1993, Charleston, South Carolina, USA[doi>10.1145/158511.158521]
Laurence C. Paulson, ML for the working programmer, Cambridge University Press, New York, NY, 1991
PERRY, N. 1989. I/O and inter-language calling for functional languages. In Proceedings of Ninth International Conference of the Chilean Computer Society and 15th Latin American Conference on Informatics (Chile). Also available at ftp://smis-asterix/pub/ResearchPapers/ FL_IO IL Chile_Ju189.ps.Z.
PETERSON, J. AND HAMMOND, K., Eds. 1996. Report on the programming language Haskell, a non-strict purely-functional programming language, Version 1.3. Tech. Rep., Yale University, May.
PEYTON JONES, S. L. AND FINNE, S. 1995. Composing Haggis. Manuscript.
Simon L. Peyton Jones , Philip Wadler, Imperative functional programming, Proceedings of the 20th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.71-84, March 1993, Charleston, South Carolina, USA[doi>10.1145/158511.158524]
Simon Peyton Jones , Andrew Gordon , Sigbjorn Finne, Concurrent Haskell, Proceedings of the 23rd ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.295-308, January 21-24, 1996, St. Petersburg Beach, Florida, USA[doi>10.1145/237721.237794]
PLOTKIN, G. 1975. Call-by-name, call-by-value, and the ~-calculus. Theor. Comput. Sci. 1, 125-159.
John C. Reynolds, The discoveries of continuations, Lisp and Symbolic Computation, v.6 n.3-4, p.233-248, Nov. 1993[doi>10.1007/BF01019459]
Amr Sabry , Philip Wadler, A reflection on call-by-value, Proceedings of the first ACM SIGPLAN international conference on Functional programming, p.13-24, May 24-26, 1996, Philadelphia, Pennsylvania, USA[doi>10.1145/232627.232631]
David A. Schmidt, Detecting global variables in denotational specifications, ACM Transactions on Programming Languages and Systems (TOPLAS), v.7 n.2, p.299-310, April 1985[doi>10.1145/3318.3323]
M. Spivey, A functional theory of exceptions, Science of Computer Programming, v.14 n.1, p.25-42, Jun. 1990[doi>10.1016/0167-6423(90)90056-J]
Guy L. Steele, Jr., Building interpreters by composing monads, Proceedings of the 21st ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.472-492, January 16-19, 1994, Portland, Oregon, USA[doi>10.1145/174675.178068]
W Stoye, Message-based functional operating systems, Science of Computer Programming, v.6 n.3, p.291-311, May 1986
Philip Wadler, How to replace failure by a list of successes, Proc. of a conference on Functional programming languages and computer architecture, p.113-128, January 1985, Nancy, France
Philip Wadler, Comprehending monads, Proceedings of the 1990 ACM conference on LISP and functional programming, p.61-78, June 27-29, 1990, Nice, France[doi>10.1145/91556.91592]
WADLER, P. 1990b. Linear types can change the world! In Programming Concepts and Methods (Sea of Galilee, Israel, April), M. Broy and C. Jones, Eds., North Holland.
Philip Wadler, The essence of functional programming, Proceedings of the 19th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, p.1-14, January 19-22, 1992, Albuquerque, New Mexico, USA[doi>10.1145/143165.143169]
Philip Wadler, Monads for Functional Programming, Advanced Functional Programming, First International Spring School on Advanced Functional Programming Techniques-Tutorial Text, p.24-52, May 24-30, 1995
Philip Wadler, A Taste of Linear Logic, Proceedings of the 18th International Symposium on Mathematical Foundations of Computer Science, p.185-210, August 30-September 03, 1993
Philip Wadler, Monads and composable continuations, Lisp and Symbolic Computation, v.7 n.1, p.39-56, Jan. 1994[doi>10.1007/BF01019944]
WADLER, P. 1995. How to declare an imperative. In International Logic Programming Symposium, (Dec.), John Lloyd, Ed., MIT Press, Cambridge, MA.
WARREN, D. H. D. 1981. Higher-order extensions to Prolog--are they needed? In Machine Intelligence 10, D. Michie, et al., Eds., Ellis Horwood, Chichester, UK.
